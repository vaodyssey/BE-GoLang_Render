// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: label.sql

package db

import (
	"context"
)

const getAllLabelsPaginated = `-- name: GetAllLabelsPaginated :many
SELECT name, image
FROM labels
LIMIT ?
OFFSET ?
`

type GetAllLabelsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllLabelsPaginated(ctx context.Context, arg GetAllLabelsPaginatedParams) ([]Label, error) {
	rows, err := q.db.QueryContext(ctx, getAllLabelsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(&i.Name, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLabelTotalCounts = `-- name: GetLabelTotalCounts :one
SELECT COUNT(*)
FROM labels
`

func (q *Queries) GetLabelTotalCounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLabelTotalCounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}
