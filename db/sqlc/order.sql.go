// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id, amount, status, user_id, created_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateOrderParams struct {
	ID        string    `json:"id"`
	Amount    float64   `json:"amount"`
	Status    int32     `json:"status"`
	UserID    string    `json:"userId"`
	CreatedAt time.Time `json:"createdAt"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.Amount,
		arg.Status,
		arg.UserID,
		arg.CreatedAt,
	)
	return err
}

const createOrderDetails = `-- name: CreateOrderDetails :exec
INSERT INTO order_details (order_id, product_id, quantity)
VALUES (?, ?, ?)
`

type CreateOrderDetailsParams struct {
	OrderID   string `json:"orderId"`
	ProductID string `json:"productId"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) CreateOrderDetails(ctx context.Context, arg CreateOrderDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createOrderDetails, arg.OrderID, arg.ProductID, arg.Quantity)
	return err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, amount, status, user_id, created_at
FROM orders
WHERE STRCMP(?,user_id) = 0 AND STRCMP(?,id) = 0
`

type GetOrderByIdParams struct {
	UserID string `json:"userId"`
	ID     string `json:"id"`
}

func (q *Queries) GetOrderById(ctx context.Context, arg GetOrderByIdParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, arg.UserID, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Status,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderDetails = `-- name: GetOrderDetails :many
SELECT order_id, product_id, quantity
FROM order_details
WHERE order_id = ?
`

func (q *Queries) GetOrderDetails(ctx context.Context, orderID string) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderTotalCount = `-- name: GetOrderTotalCount :one
SELECT COUNT(*)
FROM orders
WHERE STRCMP(?,user_id) = 0
`

func (q *Queries) GetOrderTotalCount(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOrderTotalCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrdersPaginated = `-- name: GetOrdersPaginated :many
SELECT id, amount, status, user_id, created_at
FROM orders
ORDER BY
    CASE WHEN ? = 'createdAt' AND ? = 'ASC' THEN created_at END ,
    CASE WHEN ? = 'createdAt' AND ? = 'DESC' THEN created_at END DESC ,
    CASE WHEN ? = 'status' AND ? = 'ASC' THEN status END,
    CASE WHEN ? = 'status' AND ? = 'DESC' THEN status END DESC,
    CASE WHEN ? = 'amount' AND ? = 'ASC' THEN amount END,
    CASE WHEN ? = 'amount' AND ? = 'DESC' THEN amount END DESC
LIMIT ?
OFFSET ?
`

type GetOrdersPaginatedParams struct {
	SortBy    interface{} `json:"sortBy"`
	SortOrder interface{} `json:"sortOrder"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) GetOrdersPaginated(ctx context.Context, arg GetOrdersPaginatedParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersPaginated,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.SortBy,
		arg.SortOrder,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Status,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders set status = ? WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status int32  `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
